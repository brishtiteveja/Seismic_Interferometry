for (i in 1:num_station) {
t = paste("Summed Amplitude of noise from station", i)
plot(rev(st_sum[[i]]), 1:m, type='l', col=i, ylab='Amp', main=t)
abline(v=0, lty=2)
}
m = n/4
st_sum = list()
j = 1
for(st in station) {
cur_st_sum = rep(0, m)
i = 1
for (stv in st$val) {
idx = i %% m + 1
cur_st_sum[[idx]] = cur_st_sum[[idx]] + stv
i = i+1
}
st_sum[[j]] = cur_st_sum
j = j+1
}
par(mar=c(2,2,2,2))
for (i in 1:num_station) {
t = paste("Summed Amplitude of noise from station", i)
plot(rev(st_sum[[i]]), 1:m, type='l', col=i, ylab='Amp', main=t)
abline(v=0, lty=2)
}
par(mar=c(2,2,2,2))
for (i in 1:num_station) {
t = paste("Summed Amplitude of noise from station", i)
plot(rev(st_sum[[i]]), 1:m, type='l', col=i, ylab='Amp', main=t)
abline(v=0, lty=2)
}
?butter
b1= butter(2, c(0.01/(fs/2), 2/(fs/2)))
signbit <- function(data){
for (i in seq(1,length(data))){
if (data[i] < 0) {
data[i] = -1
} else if (data[i] > 0) {
data[i] = 1
} else
data[i] =0
}
return(data)
}
time=(0:(n-1))*dt
proccc <- addTransform(byamp, function(v) {
a = v$amp -  mean(v$amp)
a = detrend(a)
a = filtfilt(b1, a, type="pass")
b = signbit(a)
au_sta_22  = acf(b,lag.max = (2*n)/2 -1, type = c("correlation"))
fit.loess22 <- loess(au_sta_22$acf ~ time[1:n], span=0.15, degree=2)
predict.loess22 <- predict(fit.loess22, time[1:n], se=TRUE)
a_22 <- ts(au_sta_22$acf, frequency = fs) # tell R the sampling frequency
a_22_spec <- spec.pgram(a_22, demean = FALSE, detrend = TRUE,plot = TRUE)
s_22 <- ts(predict.loess22$fit, frequency = fs) # tell R the sampling frequency
s_22_spec <- spec.pgram(s_22, demean = FALSE, detrend = TRUE,plot = TRUE)
# spectral whitening can be done dividing the power spectrum of autocorrelated data to smoothed data . add a little damping to the denominator
wh_sta_22 = a_22_spec$spec / (s_22_spec$spec + 0.00001)
wh_sta_22_time = abs(ifft((wh_sta_22)))
b2= butter(2, c(6/(fs/2), 12/(fs/2)))
result_station_22 <- filtfilt(b2, wh_sta_22_time, type="pass")
})
last = recombine(proccc, combRbind)
length(b1)
b1= butter(2, c(0.01/(fs/2), 3/(fs/2)))
signbit <- function(data){
for (i in seq(1,length(data))){
if (data[i] < 0) {
data[i] = -1
} else if (data[i] > 0) {
data[i] = 1
} else
data[i] =0
}
return(data)
}
time=(0:(n-1))*dt
proccc <- addTransform(byamp, function(v) {
a = v$amp -  mean(v$amp)
a = detrend(a)
a = filtfilt(b1, a, type="pass")
b = signbit(a)
au_sta_22  = acf(b,lag.max = (2*n)/2 -1, type = c("correlation"))
fit.loess22 <- loess(au_sta_22$acf ~ time[1:n], span=0.15, degree=2)
predict.loess22 <- predict(fit.loess22, time[1:n], se=TRUE)
a_22 <- ts(au_sta_22$acf, frequency = fs) # tell R the sampling frequency
a_22_spec <- spec.pgram(a_22, demean = FALSE, detrend = TRUE,plot = TRUE)
s_22 <- ts(predict.loess22$fit, frequency = fs) # tell R the sampling frequency
s_22_spec <- spec.pgram(s_22, demean = FALSE, detrend = TRUE,plot = TRUE)
# spectral whitening can be done dividing the power spectrum of autocorrelated data to smoothed data . add a little damping to the denominator
wh_sta_22 = a_22_spec$spec / (s_22_spec$spec + 0.00001)
wh_sta_22_time = abs(ifft((wh_sta_22)))
b2= butter(2, c(6/(fs/2), 12/(fs/2)))
result_station_22 <- filtfilt(b2, wh_sta_22_time, type="pass")
})
last = recombine(proccc, combRbind)
station = list()
for (i in 1:num_station) {
st_number = as.numeric(paste("100", i, sep=""))
station[[i]] = subset(last, last$HEAD.kstnm == st_number)
}
for (i in 1:num_station) {
t = paste("Amplitude of noise from station", i)
plot(station[[i]]$val[1:n], type='l', col=i, ylab='Amp', main=t)
}
m = n/4
st_sum = list()
j = 1
for(st in station) {
cur_st_sum = rep(0, m)
i = 1
for (stv in st$val) {
idx = i %% m + 1
cur_st_sum[[idx]] = cur_st_sum[[idx]] + stv
i = i+1
}
st_sum[[j]] = cur_st_sum
j = j+1
}
par(mar=c(2,2,2,2))
for (i in 1:num_station) {
t = paste("Summed Amplitude of noise from station", i)
plot(rev(st_sum[[i]]), 1:m, type='l', col=i, ylab='Amp', main=t)
abline(v=0, lty=2)
}
proccc <- addTransform(byamp, function(v) {
a = v$amp -  mean(v$amp)
a = detrend(a)
a = filtfilt(b1, a, type="pass")
b = signbit(a)
au_sta_22  = acf(b,lag.max = (2*n)/2 -1, type = c("correlation"))
fit.loess22 <- loess(au_sta_22$acf ~ time[1:n], span=0.15, degree=2)
predict.loess22 <- predict(fit.loess22, time[1:n], se=TRUE)
a_22 <- ts(au_sta_22$acf, frequency = fs) # tell R the sampling frequency
a_22_spec <- spec.pgram(a_22, demean = FALSE, detrend = TRUE,plot = TRUE)
s_22 <- ts(predict.loess22$fit, frequency = fs) # tell R the sampling frequency
s_22_spec <- spec.pgram(s_22, demean = FALSE, detrend = TRUE,plot = TRUE)
# spectral whitening can be done dividing the power spectrum of autocorrelated data to smoothed data . add a little damping to the denominator
wh_sta_22 = a_22_spec$spec / (s_22_spec$spec + 0.00001)
wh_sta_22_time = abs(ifft((wh_sta_22)))
b2= butter(2, c(4/(fs/2), 8/(fs/2)))
result_station_22 <- filtfilt(b2, wh_sta_22_time, type="pass")
})
last = recombine(proccc, combRbind)
proccc <- addTransform(byamp, function(v) {
a = v$amp -  mean(v$amp)
a = detrend(a)
a = filtfilt(b1, a, type="pass")
b = signbit(a)
au_sta_22  = acf(b,lag.max = (2*n)/2 -1, type = c("correlation"))
fit.loess22 <- loess(au_sta_22$acf ~ time[1:n], span=0.15, degree=2)
predict.loess22 <- predict(fit.loess22, time[1:n], se=TRUE)
a_22 <- ts(au_sta_22$acf, frequency = fs) # tell R the sampling frequency
a_22_spec <- spec.pgram(a_22, demean = FALSE, detrend = TRUE,plot = TRUE)
s_22 <- ts(predict.loess22$fit, frequency = fs) # tell R the sampling frequency
s_22_spec <- spec.pgram(s_22, demean = FALSE, detrend = TRUE,plot = TRUE)
# spectral whitening can be done dividing the power spectrum of autocorrelated data to smoothed data . add a little damping to the denominator
wh_sta_22 = a_22_spec$spec / (s_22_spec$spec + 0.00001)
wh_sta_22_time = abs(ifft((wh_sta_22)))
b2= butter(2, c(6/(fs/2), 12/(fs/2)))
result_station_22 <- filtfilt(b2, wh_sta_22_time, type="pass")
})
last = recombine(proccc, combRbind)
station = list()
for (i in 1:num_station) {
st_number = as.numeric(paste("100", i, sep=""))
station[[i]] = subset(last, last$HEAD.kstnm == st_number)
}
for (i in 1:num_station) {
t = paste("Amplitude of noise from station", i)
plot(station[[i]]$val[1:n], type='l', col=i, ylab='Amp', main=t)
}
m = n/4
st_sum = list()
j = 1
for(st in station) {
cur_st_sum = rep(0, m)
i = 1
for (stv in st$val) {
idx = i %% m + 1
cur_st_sum[[idx]] = cur_st_sum[[idx]] + stv
i = i+1
}
st_sum[[j]] = cur_st_sum
j = j+1
}
par(mar=c(2,2,2,2))
for (i in 1:num_station) {
t = paste("Summed Amplitude of noise from station", i)
plot(rev(st_sum[[i]]), 1:m, type='l', col=i, ylab='Amp', main=t)
abline(v=0, lty=2)
}
dt
time = (0:(n/4 - 1)) * dt
time
length(time)
par(mar=c(2,2,2,2))
time = (0:(n/4 - 1)) * dt
for (i in 1:num_station) {
t = paste("Summed Amplitude of noise from station", i)
plot(rev(st_sum[[i]]), time, type='l', col=i, ylab='Amp', main=t)
abline(v=0, lty=2)
}
par(mar=c(4,4,4,4))
time = (0:(n/4 - 1)) * dt
for (i in 1:num_station) {
t = paste("Summed Amplitude of noise from station", i)
plot(rev(st_sum[[i]]), time, type='l', col=i, xlab='Time(s)', ylab='Amp', main=t)
abline(v=0, lty=2)
}
par(mar=c(4,4,4,4))
time = (0:(n/4 - 1)) * dt
for (i in 1:num_station) {
t = paste("Summed Amplitude of noise from station", i)
plot(rev(st_sum[[i]]), time, type='l', col=i, ylab='Time(s)', xlab='Amp', main=t)
abline(v=0, lty=2)
}
par(mar=c(4,4,4,4))
time = (0:(n/4 - 1)) * dt
for (i in 1:num_station) {
t = paste("Summed Amplitude of noise from station", i)
plot(rev(st_sum[[i]]), time, type='l', col=i, ylab='Time(s)', xlab='Amp', main=t, xlim(-max(st_sum[[i]], max(st_sum[[i]]))))
abline(v=0, lty=2)
}
par(mar=c(4,4,4,4))
time = (0:(n/4 - 1)) * dt
for (i in 1:num_station) {
t = paste("Summed Amplitude of noise from station", i)
plot(rev(st_sum[[i]]), time, type='l', col=i, ylab='Time(s)', xlab='Amp', main=t, xlim=c(-max(st_sum[[i]], max(st_sum[[i]]))))
abline(v=0, lty=2)
}
par(mar=c(4,4,4,4))
time = (0:(n/4 - 1)) * dt
for (i in 1:num_station) {
t = paste("Summed Amplitude of noise from station", i)
plot(rev(st_sum[[i]]), time, type='l', col=i, ylab='Time(s)', xlab='Amp', main=t, xlim=c(-max(st_sum[[i]]), max(st_sum[[i]])))
abline(v=0, lty=2)
}
au_sta_22
library(RSEIS)
library(RPMG)
library(Rwave)
options(continue = " ")
#mymergeddata = multmerge("/home/didi/ambtest")
library(datadr)
library(signal)
library(pracma)
fnames = list.files(path="ambtest",
pattern=NULL, full.names=TRUE )
num_station = 3
fn1  = fnames[1]
bed =  data.frame(read1sac(fn1 , Iendian = 1 , HEADONLY=FALSE, BIGLONG=FALSE))
bed <- bed[-nrow(bed),]
bed <- bed[-nrow(bed),]
dt= bed$HEAD.delta[1];
bed$HEAD.time = (1:length(bed$HEAD.npts)-1)*dt
fn2  = fnames[2]
bed2 = data.frame(read1sac(fn2 , Iendian = 1 , HEADONLY=FALSE, BIGLONG=FALSE))
bed2 <- bed2[-nrow(bed2),]
bed2 <- bed2[-nrow(bed2),]
bed2$HEAD.time = (1:length(bed2$HEAD.npts)-1)*dt
fn3  = fnames[3]
bed3 = data.frame(read1sac(fn3 , Iendian = 1 , HEADONLY=FALSE, BIGLONG=FALSE))
bed3 <- bed3[-nrow(bed3),]
bed3 <- bed3[-nrow(bed3),]
bed3$HEAD.time = (1:length(bed3$HEAD.npts)-1)*dt
fs=1/dt;
fulldata = Reduce(function(x, y) merge(x, y, all=TRUE), list(bed,bed2,bed3))
dataKV <- kvPairs(
kvPair("st1", subset(fulldata, HEAD.kstnm == '1001')),
kvPair("st2", subset(fulldata, HEAD.kstnm == '1002')),
kvPair("st3", subset(fulldata, HEAD.kstnm == '1003'))
)
datakvDdf <- ddf(dataKV)
n = 5000
byamp <- divide(datakvDdf, by ="HEAD.kstnm", spill = n,update=TRUE)
b1= butter(2, c(0.01/(fs/2), 3/(fs/2)))
signbit <- function(data){
for (i in seq(1,length(data))){
if (data[i] < 0) {
data[i] = -1
} else if (data[i] > 0) {
data[i] = 1
} else
data[i] =0
}
return(data)
}
time=(0:(n-1))*dt
proccc <- addTransform(byamp, function(v) {
a = v$amp -  mean(v$amp)
a = detrend(a)
a = filtfilt(b1, a, type="pass")
b = signbit(a)
au_sta_22  = acf(b,lag.max = (2*n)/2 -1, type = c("correlation"))
fit.loess22 <- loess(au_sta_22$acf ~ time[1:n], span=0.15, degree=2)
predict.loess22 <- predict(fit.loess22, time[1:n], se=TRUE)
a_22 <- ts(au_sta_22$acf, frequency = fs) # tell R the sampling frequency
a_22_spec <- spec.pgram(a_22, demean = FALSE, detrend = TRUE,plot = TRUE)
s_22 <- ts(predict.loess22$fit, frequency = fs) # tell R the sampling frequency
s_22_spec <- spec.pgram(s_22, demean = FALSE, detrend = TRUE,plot = TRUE)
# spectral whitening can be done dividing the power spectrum of autocorrelated data to smoothed data . add a little damping to the denominator
wh_sta_22 = a_22_spec$spec / (s_22_spec$spec + 0.00001)
wh_sta_22_time = abs(ifft((wh_sta_22)))
b2= butter(2, c(6/(fs/2), 12/(fs/2)))
result_station_22 <- filtfilt(b2, wh_sta_22_time, type="pass")
})
last = recombine(proccc, combRbind)
station = list()
for (i in 1:num_station) {
st_number = as.numeric(paste("100", i, sep=""))
station[[i]] = subset(last, last$HEAD.kstnm == st_number)
}
for (i in 1:num_station) {
t = paste("Amplitude of noise from station", i)
plot(station[[i]]$val[1:n], type='l', col=i, ylab='Amp', main=t)
}
m = n/4
st_sum = list()
j = 1
for(st in station) {
cur_st_sum = rep(0, m)
i = 1
for (stv in st$val) {
idx = i %% m + 1
cur_st_sum[[idx]] = cur_st_sum[[idx]] + stv
i = i+1
}
st_sum[[j]] = cur_st_sum
j = j+1
}
par(mar=c(4,4,4,4))
#par(mfrow=c(num_stations,1))
time = (0:(n/4 - 1)) * dt
for (i in 1:num_station) {
t = paste("Summed Amplitude of noise from station", i)
plot(rev(st_sum[[i]]), time, type='l', col=i, ylab='Time(s)', xlab='Amp', main=t, xlim=c(-max(st_sum[[i]]), max(st_sum[[i]])))
abline(v=0, lty=2)
}
library(RSEIS)
library(RPMG)
library(Rwave)
options(continue = " ")
#mymergeddata = multmerge("/home/didi/ambtest")
library(datadr)
library(signal)
library(pracma)
fnames = list.files(path="ambtest",
pattern=NULL, full.names=TRUE )
num_station = 3
fn1  = fnames[1]
bed =  data.frame(read1sac(fn1 , Iendian = 1 , HEADONLY=FALSE, BIGLONG=FALSE))
bed <- bed[-nrow(bed),]
bed <- bed[-nrow(bed),]
dt= bed$HEAD.delta[1];
bed$HEAD.time = (1:length(bed$HEAD.npts)-1)*dt
fn2  = fnames[2]
bed2 = data.frame(read1sac(fn2 , Iendian = 1 , HEADONLY=FALSE, BIGLONG=FALSE))
bed2 <- bed2[-nrow(bed2),]
bed2 <- bed2[-nrow(bed2),]
bed2$HEAD.time = (1:length(bed2$HEAD.npts)-1)*dt
fn3  = fnames[3]
bed3 = data.frame(read1sac(fn3 , Iendian = 1 , HEADONLY=FALSE, BIGLONG=FALSE))
bed3 <- bed3[-nrow(bed3),]
bed3 <- bed3[-nrow(bed3),]
bed3$HEAD.time = (1:length(bed3$HEAD.npts)-1)*dt
fs=1/dt;
fulldata = Reduce(function(x, y) merge(x, y, all=TRUE), list(bed,bed2,bed3))
dataKV <- kvPairs(
kvPair("st1", subset(fulldata, HEAD.kstnm == '1001')),
kvPair("st2", subset(fulldata, HEAD.kstnm == '1002')),
kvPair("st3", subset(fulldata, HEAD.kstnm == '1003'))
)
datakvDdf <- ddf(dataKV)
n = 5000
byamp <- divide(datakvDdf, by ="HEAD.kstnm", spill = n,update=TRUE)
b1= butter(2, c(0.01/(fs/2), 3/(fs/2)))
signbit <- function(data){
for (i in seq(1,length(data))){
if (data[i] < 0) {
data[i] = -1
} else if (data[i] > 0) {
data[i] = 1
} else
data[i] =0
}
return(data)
}
time=(0:(n-1))*dt
proccc <- addTransform(byamp, function(v) {
a = v$amp -  mean(v$amp)
a = detrend(a)
a = filtfilt(b1, a, type="pass")
b = signbit(a)
au_sta_22  = acf(b,lag.max = (2*n)/2 -1, type = c("correlation"))
fit.loess22 <- loess(au_sta_22$acf ~ time[1:n], span=0.15, degree=2)
predict.loess22 <- predict(fit.loess22, time[1:n], se=TRUE)
a_22 <- ts(au_sta_22$acf, frequency = fs) # tell R the sampling frequency
a_22_spec <- spec.pgram(a_22, demean = FALSE, detrend = TRUE,plot = TRUE)
s_22 <- ts(predict.loess22$fit, frequency = fs) # tell R the sampling frequency
s_22_spec <- spec.pgram(s_22, demean = FALSE, detrend = TRUE,plot = TRUE)
# spectral whitening can be done dividing the power spectrum of autocorrelated data to smoothed data . add a little damping to the denominator
wh_sta_22 = a_22_spec$spec / (s_22_spec$spec + 0.00001)
wh_sta_22_time = abs(ifft((wh_sta_22)))
b2= butter(2, c(6/(fs/2), 12/(fs/2)))
result_station_22 <- filtfilt(b2, wh_sta_22_time, type="pass")
})
last = recombine(proccc, combRbind)
station = list()
for (i in 1:num_station) {
st_number = as.numeric(paste("100", i, sep=""))
station[[i]] = subset(last, last$HEAD.kstnm == st_number)
}
for (i in 1:num_station) {
t = paste("Amplitude of noise from station", i)
plot(station[[i]]$val[1:n], type='l', col=i, ylab='Amp', main=t)
}
m = n/4
st_sum = list()
j = 1
for(st in station) {
cur_st_sum = rep(0, m)
i = 1
for (stv in st$val) {
idx = i %% m + 1
cur_st_sum[[idx]] = cur_st_sum[[idx]] + stv
i = i+1
}
st_sum[[j]] = cur_st_sum
j = j+1
}
par(mar=c(4,4,4,4))
#par(mfrow=c(num_stations,1))
time = (0:(n/4 - 1)) * dt
for (i in 1:num_station) {
t = paste("Summed Amplitude of noise from station", i)
plot(rev(st_sum[[i]]), time, type='l', col=i, ylab='Time(s)', xlab='Amp', main=t, xlim=c(-max(st_sum[[i]]), max(st_sum[[i]])))
abline(v=0, lty=2)
}
for (i in 1:num_station) {
t = paste("Amplitude of noise from station", i)
plot(station[[i]]$val[1:n], type='l', col=i, ylab='Amp', main=t)
}
library(RSEIS)
library(RSEIS)
library(RPMG)
library(Rwave)
options(continue = " ")
library(datadr)
library(signal)
library(pracma)
fnames = list.files(path="ambtest",
pattern=NULL, full.names=TRUE )
num_station = 3
fn1  = fnames[1]
bed =  data.frame(read1sac(fn1 , Iendian = 1 , HEADONLY=FALSE, BIGLONG=FALSE))
bed <- bed[-nrow(bed),]
bed <- bed[-nrow(bed),]
dt= bed$HEAD.delta[1];
bed$HEAD.time = (1:length(bed$HEAD.npts)-1)*dt
fn2  = fnames[2]
bed2 = data.frame(read1sac(fn2 , Iendian = 1 , HEADONLY=FALSE, BIGLONG=FALSE))
bed2 <- bed2[-nrow(bed2),]
bed2 <- bed2[-nrow(bed2),]
bed2$HEAD.time = (1:length(bed2$HEAD.npts)-1)*dt
fn3  = fnames[3]
bed3 = data.frame(read1sac(fn3 , Iendian = 1 , HEADONLY=FALSE, BIGLONG=FALSE))
bed3 <- bed3[-nrow(bed3),]
bed3 <- bed3[-nrow(bed3),]
bed3$HEAD.time = (1:length(bed3$HEAD.npts)-1)*dt
fs=1/dt;
fulldata = Reduce(function(x, y) merge(x, y, all=TRUE), list(bed,bed2,bed3))
dataKV <- kvPairs(
kvPair("st1", subset(fulldata, HEAD.kstnm == '1001')),
kvPair("st2", subset(fulldata, HEAD.kstnm == '1002')),
kvPair("st3", subset(fulldata, HEAD.kstnm == '1003'))
)
datakvDdf <- ddf(dataKV)
n = 5000
byamp <- divide(datakvDdf, by ="HEAD.kstnm", spill = n,update=TRUE)
b1= butter(2, c(0.01/(fs/2), 3/(fs/2)))
signbit <- function(data){
for (i in seq(1,length(data))){
if (data[i] < 0) {
data[i] = -1
} else if (data[i] > 0) {
data[i] = 1
} else
data[i] =0
}
return(data)
}
time=(0:(n-1))*dt
proccc <- addTransform(byamp, function(v) {
a = v$amp -  mean(v$amp)
a = detrend(a)
a = filtfilt(b1, a, type="pass")
b = signbit(a)
au_sta_22  = acf(b,lag.max = (2*n)/2 -1, type = c("correlation"))
fit.loess22 <- loess(au_sta_22$acf ~ time[1:n], span=0.15, degree=2)
predict.loess22 <- predict(fit.loess22, time[1:n], se=TRUE)
a_22 <- ts(au_sta_22$acf, frequency = fs) # tell R the sampling frequency
a_22_spec <- spec.pgram(a_22, demean = FALSE, detrend = TRUE,plot = TRUE)
s_22 <- ts(predict.loess22$fit, frequency = fs) # tell R the sampling frequency
s_22_spec <- spec.pgram(s_22, demean = FALSE, detrend = TRUE,plot = TRUE)
# spectral whitening can be done dividing the power spectrum of autocorrelated data to smoothed data . add a little damping to the denominator
wh_sta_22 = a_22_spec$spec / (s_22_spec$spec + 0.00001)
wh_sta_22_time = abs(ifft((wh_sta_22)))
b2= butter(2, c(6/(fs/2), 12/(fs/2)))
result_station_22 <- filtfilt(b2, wh_sta_22_time, type="pass")
})
